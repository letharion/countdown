<?php
/**
 * @file
 * Main module file for countdown module.
 */

/**
 * Implements hook_menu().
 */
function countdown_menu() {
  $items = array(
    'admin/structure/countdown' => array(
      'title' => 'Countdowns',
      'description' => 'Manage countdowns on your site',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('_countdown_countdown_page'),
      'access callback' => TRUE,
    ),
    'admin/structure/countdown/edit/%' => array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('_countdown_countdown_page_edit', 4),
      'access callback' => TRUE,
    ),
    'admin/structure/countdown/delete/%' => array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('_countdown_countdown_page_delete', 4),
      'access callback' => TRUE,
    ),
  );

  return $items;
}

/**
 * Build administrative page for countdowns.
 */
function _countdown_countdown_page() {
  $form = array();

  $query = db_select('countdowns', 'c');
  $countdowns = $query->fields('c')
    ->execute()
    ->fetchAll();

  $rows = array();
  foreach ($countdowns as $countdown) {
    $rows[] = array(
      date('Y-m-d H:i:s', $countdown->target_time),
      $countdown->output_format,
      l(t('Edit'), 'admin/structure/countdown/edit/' . $countdown->cid),
      l(t('Delete'), 'admin/structure/countdown/delete/' . $countdown->cid),
    );
  }

  $table = array(
    'header' => array('Target time', 'Output format', 'Edit', 'Delete'),
    'rows' => $rows,
    'attributes' => array(),
    'caption' => '',
    'colgroups' => array(),
    'sticky' => FALSE,
    'empty' => 'No countdowns created',
  );
  $form['existing_countdowns'] = array(
    '#markup' => theme_table($table),
  );

  $form['new_countdown_1'] = array(
    '#type' => 'textfield',
    '#title' => 'Target time',
    '#size' => 20,
  );

  $form['new_output_format_1'] = array(
    '#type' => 'textfield',
    '#title' => 'Output format',
    '#size' => 20,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'submit',
  );

  return $form;
}

/**
 * Validation function for _countdown_countdown_page form callback.
 */
function _countdown_countdown_page_validate($form, &$form_state) {
  $target_timestamp = strtotime($form_state['values']['new_countdown_1']);

  if (!$target_timestamp) {
    form_set_error('new_countdown_1', t('This date is not valid'));
  }
  else {
    $form_state['timestamp_1'] = $target_timestamp;
  }
}

/**
 * Submit function for _countdown_countdown_page form callback.
 */
function _countdown_countdown_page_submit($form, $form_state) {
  db_insert('countdowns')
    ->fields(array(
      'target_time' => $form_state['timestamp_1'],
      'output_format' => $form_state['values']['new_output_format_1'],
    ))->execute();
}

/**
 * Edit countdown page callback.
 */
function _countdown_countdown_page_edit($form, $form_state, $countdown_id) {
  $form = array();
  $form_state['countdown_id'] = $countdown_id;

  $countdown = db_select('countdowns', 'c')
    ->fields('c')
    ->condition('cid', $countdown_id)
    ->execute()
    ->fetchAssoc();

  $form['target_time'] = array(
    '#type' => 'textfield',
    '#title' => 'Target time',
    '#default_value' => date('Y-m-d H:i:s', $countdown['target_time']),
    '#size' => 20,
  );

  $form['output_format'] = array(
    '#type' => 'textfield',
    '#title' => 'Output format',
    '#default_value' => $countdown['output_format'],
    '#size' => 20,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'submit',
  );

  return $form;
}

/**
 * Submit callback for the _countdown_countdown_page_edit form.
 */
function _countdown_countdown_page_edit_submit($form, $form_state) {
  $result = db_update('countdowns')
    ->fields(array(
      'target_time' => strtotime($form_state['values']['target_time']),
      'output_format' => $form_state['values']['output_format'],
    ))
    ->condition('cid', $form_state['countdown_id'])
    ->execute();

  if ($result === 1) {
    drupal_set_message(t('Countdown @id was updated', array('@id' => $form_state['countdown_id'])));
  }
  else {
    drupal_set_message(t('Countdown @id could not be updated', array('@id' => $form_state['countdown_id'])));
  }

  drupal_goto('admin/structure/countdown');
}

/**
 * Delete countdown page callback.
 */
function _countdown_countdown_page_delete($form, $form_state, $countdown_id) {
  $form = array();
  $form['#redirect'] = array('admin/structure/countdown');
  $form_state['countdown_id'] = $countdown_id;

  $output = confirm_form(
    $form,
    t('Do you want to delete countdown @id?', array('@id' => $countdown_id)),
    'admin/structure/countdown'
  );

  return $output;
}

/**
 * Submit callback for the countdown delete confirmation form.
 */
function _countdown_countdown_page_delete_submit($form, $form_state) {
  $result = db_delete('countdowns')
    ->condition('cid', $form_state['countdown_id'])
    ->execute();

  if ($result === 1) {
    drupal_set_message(t('Countdown @id was deleted', array('@id' => $form_state['countdown_id'])));
  }
  else {
    drupal_set_message(t('Countdown @id could not be deleted', array('@id' => $form_state['countdown_id'])));
  }

  drupal_goto('admin/structure/countdown');
}

/**
 * Implements hook_block_info().
 */
function countdown_block_info() {
  $query = db_select('countdowns', 'c');
  $countdowns = $query->fields('c')
    ->execute()
    ->fetchAll();

  $blocks = array();

  foreach ($countdowns as $countdown) {
    $blocks['countdown_' . $countdown->cid] = array(
      'info' => t('Timer block targeting @time', array('@time' => date('Y-m-d H:i:s', $countdown->target_time))),
      'cache' => DRUPAL_CACHE_GLOBAL,
    );
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function countdown_block_view($delta) {
  $cid = substr($delta, 10);

  if (!is_numeric($cid)) {
    return;
  }

  $countdown = db_select('countdowns', 'c')
    ->fields('c')
    ->condition('cid', $cid)
    ->execute()
    ->fetchAssoc();

  $jq_countdown = theme('jquery_countdown', array(
    'id' => 'countdown_' . $cid,
    'options' => array(
      'until' => date('F d, Y g:i a', $countdown['target_time']),
      'format' => $countdown['output_format'],
      'description' => '',
    ),
    'content' => date('Y-M-D H:i:s', $countdown['target_time']),
  ));

  $block = array(
    'subject' => '',
    'content' => $jq_countdown,
  );

  return $block;
}

/**
 * Implements hook_context_node_condition_alter().
 */
function countdown_context_context_node_condition_alter($node, $op) {
  dpm($node);
  dpm($op);
  if ($plugin = context_get_plugin('condition', 'countdown_context_date_condition')) {
    dpm($plugin);
    $plugin->execute($node, $op);
  }
}

/**
 * Implements hook_context_plugins().
 */
function countdown_context_plugins() {
  $plugins = array(
    'countdown_context_date_condition' => array(
      'handler' => array(
        'class' => 'countdown_context_date_condition',
        'parent' => 'context_condition',
      ),
    ),
  );

  return $plugins;
}

/**
 * Implements hook_context_registry().
 */
function countdown_context_registry() {
  return array(
    'conditions' => array(
      'countdown_context_date_condition' => array(
        'title' => t('Countdown'),
        'description' => t('Set a condition based on the value of a countdown'),
        'plugin' => 'countdown_context_date_condition',
      ),
    ),
  );
}
